# Trivy
# AnÃ¡lisis profundo de un contenedor con la herramienta de Trivy
# 

trigger: none # Disable CI triggers.
#- master

resources:
- repo: self

variables:
# a regular variable
- name: dockerfilePath
  value: '$(Build.SourcesDirectory)/Dockerfile'
- name: tag
  value: 'latest'
- name: vmImageName
  value: 'ubuntu-latest'
- name: sariflog
  value: 'ImageAnalysisLogs'
# a variable group
- group: Mis_Variables

stages:
  - stage: SecurityScan
    displayName: SecurityAnalysis
    jobs:
      - job: Trivy
        displayName: Trivy
        pool:
          vmImage: $(vmImageName)
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: $(ACR_Conn)
            command: 'login'
        - task: trivy@1
          inputs:
            version: 'latest'
            docker: false
            exitCode: 0
            image: $(ACR_NAME)/$(WEBAPP_NAME):latest
            debug: true
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              # Write your commands here
              mkdir $(sariflog)
              export TRIVY_AUTH_URL=$(ACR_NAME)
              export TRIVY_USERNAME=$(ACR_USERNAME)
              export TRIVY_PASSWORD=$(ACR_PWD)
              echo "[+] Fetching Trivy"
              export TRIVYVERSION=$(git ls-remote --refs --sort="version:refname" --tags https://github.com/aquasecurity/trivy | cut -d/ -f3-|tail -n1 | sed -e 's/^.//')
              echo "[+] Trivy Version:" ${TRIVYVERSION}
              wget -nv --no-cache https://github.com/aquasecurity/trivy/releases/download/v${TRIVYVERSION}/trivy_${TRIVYVERSION}_Linux-64bit.deb
              echo "[+] Installing Trivy"
              sudo dpkg -i trivy_${TRIVYVERSION}_Linux-64bit.deb
              echo "[+] Trivy Installed "${TRIVYVERSION}
              echo "[+] Running Trivy"
              echo "***Vulneability Assesment***"
              echo "[+] Creating Trivy Vulnerabilities"
              trivy --quiet image --format sarif -o $(sariflog)/Trivy_Vulnerabilities.sarif --exit-code 0 $(containerRegistryn)/$(imageRepository)
              echo "***License Inventory***"
              echo "[+] Creating Trivy License Inventory" 
              trivy --quiet image -f table --scanners license --license-full --exit-code 0 $(containerRegistryn)/$(imageRepository) > $(sariflog)/License_Report.txt
              echo "***Docker Compliance Analysis***"
              echo "[+] Creating Trivy Docker Compliance File" 
              trivy --quiet image -f table --compliance docker-cis $(containerRegistryn)/$(imageRepository) > $(sariflog)/CIS_Compliance_Report.txt
              echo "***Dockerfile Analysis***"
              echo "[+] Creating Dockerfile Compliance" 
              trivy --quiet --format sarif -o $(sariflog)/Compliance_Dockerfile_Report.sarif config $(dockerfilePath)
              echo "***SBOM Analysis***"
              echo "[+] Creating Trivy SBOM JSON File" 
              trivy --quiet image --list-all-pkgs --scanners vuln --format cyclonedx --output $(sariflog)/SBOM_Cyclonedx_Report.json --exit-code 0 $(containerRegistryn)/$(imageRepository)
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: './$(sariflog)'
            artifact: '$(sariflog)'
            publishLocation: 'pipeline'
